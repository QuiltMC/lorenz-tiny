plugins {
	id 'java-library'
	id 'maven-publish'
	alias libs.plugins.quilt.gradle.licenser
}

def ENV = System.getenv()

archivesBaseName = project.archives_base_name
version = "$project.version${ENV.GITHUB_ACTIONS == 'true' ? '' : '+local'}"
group = project.maven_group

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
	withJavadocJar()
}

repositories {
	mavenCentral()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
}

dependencies {
	api libs.lorenz
	api libs.mapping.io
}

license {
	rule file("codeformat/HEADER")
	include '**/*.java'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL('https://maven.quiltmc.org/repository/release/org/quiltmc/lorenz-tiny/maven-metadata.xml').text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion